var assert = require("assert")
var prototype = require('../lib/prototype')

describe('remove', function(){
  it('should remove number 0 from arr', function(){
    var arr = [1, 0, 2]
    prototype.remove.call(arr, 0)
    assert.deepEqual(arr, [1, 2]);
  })

  it('should remove b from arr', function(){
    var a = {foo: 1}
    var b = {bar: 3}
    var c = {bar2: 'd'}
    var arr = [a, b, c]
    prototype.remove.call(arr, b)
    assert.deepEqual(arr, [a, c]);
  })
})

describe('has', function(){
  it('should has 10', function(){
    var has = prototype.has.call([0, 30, 10], 10)
    assert.equal(has, true);
  })
  it('should not has 0', function(){
    var has = prototype.has.call([2, 30, 10], 0)
    assert.equal(has, false);
  })
  it('should not has null', function(){
    var has = prototype.has.call([2, 30, 10], null)
    assert.equal(has, false);
  })
})

describe('count', function(){
  it('count a > 8 is 2', function(){
    var arr = [{a: 10}, {a: 1}, {a: 12}]
    var count = prototype.count.call(arr, function(item) {
      return item.a > 8
    })
    assert.equal(count, 2);
  })
  it('ampty array always count 0', function(){
    var count = prototype.count.call([], function() {

    })
    assert.equal(count, 0);
  })
})

describe('find', function(){
  it('find the first x that x.a > 10', function(){
    var arr = [{a: 10}, {a: 1}, {a: 12}, {a: 20}]
    var object = prototype.find.call(arr, function(item) {
      return item.a > 10
    })
    assert.deepEqual(object, {a: 12});
  })

  it('find undefined if no match', function(){
    var arr = [{a: 10}, {a: 1}, {a: 12}, {a: 20}]
    var object = prototype.find.call(arr, function(item) {
      return item.a > 100
    })
    assert.equal(object, undefined);
  })
})

describe('best', function(){
  it('get the object that has the shortest prop `a`', function(){
    var arr = [{a: 'hello'}, {a: 'world'}, {a: ','}, {a: 'persis'}]
    var object = prototype.best.call(arr, function(item1, item2) {
      return item1.a.length < item2.a.length
    })
    assert.deepEqual(object, {a: ','});
  })
  it('get the object that has the bigest prop `id`', function(){
    var arr = [{id: 3}, {id: 10}, {id: 9}, {id: null}]
    var object = prototype.best.call(arr, 'id')
    assert.deepEqual(object, {id: 10});
  })
})

